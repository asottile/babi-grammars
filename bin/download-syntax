#!/usr/bin/env python3
from __future__ import annotations

import argparse
import concurrent.futures
import configparser
import functools
import io
import json
import os.path
import plistlib
import re
import subprocess
import tempfile
import textwrap
import urllib.parse
import urllib.request
from typing import Any
from typing import NamedTuple

import cson  # pip install cson

HEADER_RE = re.compile('^#+ ', re.MULTILINE)
TRAILING_WS_RE = re.compile(r'\s+$', re.MULTILINE)

_STRATEGIES = (json.loads, cson.loads, plistlib.loads)
_GRAMMAR_DIR = 'share/babi/grammar_v1'
_LICENSE_DIR = 'licenses'

# TODO: I'd like to find grammars for these, but for now, shrugs
_EMPTY_GRAMMAR_ROOT_SCOPES = (
    'source.x86_64',
    'source.arm',
    'source.asm',
    'source.x86',
)


class Repo(NamedTuple):
    name: str
    version: str
    license_path: str
    grammars: tuple[str, ...]
    todo: str | None = None

    @property
    def license_filename(self) -> str:
        return f'LICENSE_{self.name.replace("/", "_")}'

    def url(self, path: str) -> str:
        path = urllib.parse.quote(path)
        return f'https://raw.github.com/{self.name}/{self.version}/{path}'

    def __repr__(self) -> str:
        grammars = tuple(sorted(self.grammars))
        max_width = 80 - len('        grammars=') - len(',')
        if len(repr(self.grammars)) > max_width:
            grammars_repr = (
                '(\n' +
                ''.join(f'        {g!r},\n' for g in grammars) +
                '    )'
            )
        else:
            grammars_repr = repr(grammars)

        if self.todo:
            todo_repr = f'    todo={self.todo!r},\n'
        else:
            todo_repr = ''

        return (
            f'{type(self).__name__}(\n'
            f'    name={self.name!r},\n'
            f'    version={self.version!r},\n'
            f'    license_path={self.license_path!r},\n'
            f'    grammars={grammars_repr},\n'
            f'{todo_repr}'
            f')'
        )


# BEGIN
REPOS = (
    Repo(
        name='Dart-Code/Dart-Code',
        version='236b4ebb',
        license_path='LICENSE',
        grammars=('syntaxes/dart.json',),
    ),
    Repo(
        name='MagicStack/MagicPython',
        version='b2b4f4a',
        license_path='LICENSE',
        grammars=(
            'grammars/MagicPython.tmLanguage',
            'grammars/MagicRegExp.tmLanguage',
        ),
    ),
    Repo(
        name='PowerShell/EditorSyntax',
        version='742f0b5',
        license_path='LICENSE',
        grammars=('PowerShellSyntax.tmLanguage',),
    ),
    Repo(
        name='WhereIsX/vscode-crystal-lang',
        version='1a645b32ce7c14e1edf7cf2a533d774a7754dbed',
        license_path='LICENSE',
        grammars=('syntaxes/crystal.json',),
    ),
    Repo(
        name='asottile/atom-language-rust',
        version='e113ca67',
        license_path='LICENSE.md',
        grammars=('grammars/rust.cson',),
        todo='https://github.com/zargony/atom-language-rust/pull/149',
    ),
    Repo(
        name='asottile/language-shellscript',
        version='821ef6f',
        license_path='LICENSE.md',
        grammars=(
            'grammars/shell-session.cson',
            'grammars/shell-unix-bash.cson',
        ),
    ),
    Repo(
        name='asottile/language-xml',
        version='2d76bc1f',
        license_path='LICENSE.md',
        grammars=('grammars/xml.cson', 'grammars/xsl.cson'),
        todo='https://github.com/atom/language-xml/pull/99',
    ),
    Repo(
        name='asottile/make.tmbundle',
        version='b23245d',
        license_path='LICENSE.md',
        grammars=('Syntaxes/Makefile.plist',),
    ),
    Repo(
        name='asottile/yaml.tmbundle',
        version='b81b4184',
        license_path='README.mdown#License',
        grammars=('Syntaxes/YAML.tmLanguage',),
        todo='https://github.com/textmate/yaml.tmbundle/pull/35',
    ),
    Repo(
        name='atom/language-css',
        version='6721682',
        license_path='LICENSE.md',
        grammars=('grammars/css.cson',),
    ),
    Repo(
        name='atom/language-php',
        version='ff64523',
        license_path='LICENSE.md',
        grammars=('grammars/php.cson',),
    ),
    Repo(
        name='atom/language-sass',
        version='f52ab12',
        license_path='LICENSE.md',
        grammars=(
            'grammars/sass.cson',
            'grammars/sassdoc.cson',
            'grammars/scss.cson',
        ),
    ),
    Repo(
        name='dotnet/csharp-tmLanguage',
        version='1661271',
        license_path='LICENSE',
        grammars=('grammars/csharp.tmLanguage',),
    ),
    Repo(
        name='elixir-editors/elixir-tmbundle',
        version='43c8cd9',
        license_path='LICENSE',
        grammars=('Syntaxes/Elixir.tmLanguage',),
    ),
    Repo(
        name='hashicorp/vscode-terraform',
        version='4f45801',
        license_path='LICENSE',
        grammars=('syntaxes/terraform.tmGrammar.json',),
    ),
    Repo(
        name='ionide/ionide-fsgrammar',
        version='c6e0475',
        license_path='LICENSE.md',
        grammars=('grammars/fsharp.json',),
    ),
    Repo(
        name='jeff-hykin/better-c-syntax',
        version='34712a6',
        license_path='LICENSE',
        grammars=('autogenerated/c.tmLanguage.json',),
    ),
    Repo(
        name='jeff-hykin/better-cpp-syntax',
        version='35f350e5',
        license_path='LICENSE',
        grammars=(
            'autogenerated/cpp.embedded.macro.tmLanguage.json',
            'autogenerated/cpp.tmLanguage.json',
        ),
    ),
    Repo(
        name='jeff-hykin/better-go-syntax',
        version='6175663',
        license_path='LICENSE',
        grammars=('export/generated.tmLanguage.json',),
    ),
    Repo(
        name='jeff-hykin/better-objc-syntax',
        version='d8535b4',
        license_path='LICENSE',
        grammars=('autogenerated/objc.tmLanguage.json',),
    ),
    Repo(
        name='jeff-hykin/better-objcpp-syntax',
        version='e92afe5',
        license_path='LICENSE',
        grammars=('autogenerated/objcpp.tmLanguage.json',),
    ),
    Repo(
        name='lingua-pupuli/puppet-editor-syntax',
        version='57695b7',
        license_path='LICENSE',
        grammars=('syntaxes/puppet.tmLanguage',),
    ),
    Repo(
        name='microsoft/TypeScript-TmLanguage',
        version='644389a',
        license_path='LICENSE.txt',
        grammars=('TypeScript.tmLanguage', 'TypeScriptReact.tmLanguage'),
    ),
    Repo(
        name='microsoft/vscode',
        version='b37252c1823',
        license_path='LICENSE.txt',
        grammars=('extensions/java/syntaxes/java.tmLanguage.json',),
    ),
    Repo(
        name='microsoft/vscode-JSON.tmLanguage',
        version='d113e909',
        license_path='LICENSE',
        grammars=('JSON.tmLanguage',),
    ),
    Repo(
        name='microsoft/vscode-markdown-tm-grammar',
        version='402cd37',
        license_path='LICENSE.txt',
        grammars=('syntaxes/markdown.tmLanguage',),
    ),
    Repo(
        name='microsoft/vscode-mssql',
        version='c98518d',
        license_path='LICENSE.txt',
        grammars=('syntaxes/SQL.plist',),
    ),
    Repo(
        name='mmims/language-batchfile',
        version='6154ae2',
        license_path='LICENSE.md',
        grammars=('grammars/batchfile.cson',),
    ),
    Repo(
        name='moby/moby',
        version='c7ad2b866',
        license_path='LICENSE',
        grammars=(
            'contrib/syntax/textmate/Docker.tmbundle/Syntaxes/Dockerfile.tmLanguage',  # noqa: E501
        ),
    ),
    Repo(
        name='pragmagic/vscode-nim',
        version='0272a05',
        license_path='LICENSE',
        grammars=('syntaxes/nim.json', 'syntaxes/nimble.json'),
    ),
    Repo(
        name='scala/vscode-scala-syntax',
        version='52eae26',
        license_path='LICENSE.md',
        grammars=('syntaxes/Scala.tmLanguage.json',),
    ),
    Repo(
        name='stackb/bazel-stack-vscode',
        version='46a8ec3',
        license_path='LICENSE.md',
        grammars=(
            'syntaxes/bazel.tmLanguage.json',
            'syntaxes/bazelrc.tmLanguage.json',
            'syntaxes/starlark.tmLanguage.json',
        ),
    ),
    Repo(
        name='textmate/diff.tmbundle',
        version='0593bb77',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Diff.plist',),
    ),
    Repo(
        name='textmate/git.tmbundle',
        version='5870cf3',
        license_path='MIT-LICENSE',
        grammars=(
            'Syntaxes/Git Commit Message.tmLanguage',
            'Syntaxes/Git Rebase Message.tmLanguage',
        ),
    ),
    Repo(
        name='textmate/haskell.tmbundle',
        version='568ba21',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Haskell.plist',),
    ),
    Repo(
        name='textmate/html.tmbundle',
        version='0c3d5ee5',
        license_path='README.mdown#License',
        grammars=(
            'Syntaxes/HTML (Derivative).tmLanguage',
            'Syntaxes/HTML.plist',
        ),
    ),
    Repo(
        name='textmate/ini.tmbundle',
        version='7d8c7b55',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Ini.plist',),
    ),
    Repo(
        name='textmate/lua.tmbundle',
        version='8ae56413',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Lua.plist',),
    ),
    Repo(
        name='textmate/perl.tmbundle',
        version='a85927a',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Perl 6.tmLanguage', 'Syntaxes/Perl.plist'),
    ),
    Repo(
        name='textmate/r.tmbundle',
        version='292d9a2',
        license_path='README.mdown#License',
        grammars=('Syntaxes/R.plist',),
    ),
    Repo(
        name='textmate/ruby.tmbundle',
        version='efcb894',
        license_path='README.mdown#License',
        grammars=(
            'Syntaxes/Gemfile.tmLanguage',
            'Syntaxes/HTML (Ruby - ERB).tmLanguage',
            'Syntaxes/Ruby.plist',
        ),
    ),
    Repo(
        name='textmate/swift.tmbundle',
        version='8c7672d',
        license_path='README.md#License',
        grammars=('Syntaxes/Swift.tmLanguage',),
    ),
    Repo(
        name='textmate/toml.tmbundle',
        version='e82b64c',
        license_path='README.mdown#License',
        grammars=('Syntaxes/TOML.tmLanguage',),
    ),
    Repo(
        name='trond-snekvik/vscode-rst',
        version='efa642b',
        license_path='LICENSE.txt',
        grammars=('syntaxes/rst.tmLanguage.json',),
    ),
)
# END


json_dump = functools.partial(json.dump, separators=(',', ':'))


def _ts_to_js(scope: str, dct: dict[str, Any]) -> dict[str, Any]:
    ret = {}

    for k, v in dct.items():
        if k == 'name' and v == 'TypeScriptReact':
            v = 'JavaScriptReact'
        elif k == 'fileTypes':
            v = ['js', 'jsx', 'es6', 'mjs', 'cjs']
        elif k == 'scopeName':
            v = f'source{scope}'
        elif isinstance(v, list):
            v = [_ts_to_js(scope, d) for d in v if isinstance(d, dict)]
        elif isinstance(v, dict):
            v = _ts_to_js(scope, v)
        elif k in {'name', 'contentName'} and isinstance(v, str):
            v = v.replace('.tsx', scope)

        ret[k] = v

    return ret


def _download_repo(repo: Repo) -> set[str]:
    license_path, _, header = repo.license_path.partition('#')
    license_url = repo.url(license_path)
    license_s = urllib.request.urlopen(license_url).read().decode()

    if header:
        sections = HEADER_RE.split(license_s)
        for section in sections:
            if section.startswith(header):
                _, _, license_s = section.partition('\n')
                break
        else:
            raise AssertionError(f'not found {repo.license_path}')

    # some licenses have trailing whitespace, ugh
    license_s = TRAILING_WS_RE.sub('', license_s)

    license_filename = os.path.join(_LICENSE_DIR, repo.license_filename)
    with open(license_filename, 'w', encoding='UTF-8') as f:
        f.write(f'LICENSE retrieved from {license_url}\n\n')
        f.write(f'{"-" * 79}\n\n')
        f.write(f'{license_s.rstrip()}\n')

    downloaded_grammars = set()
    for grammar in repo.grammars:
        grammar_s = urllib.request.urlopen(repo.url(grammar)).read()
        for strategy in _STRATEGIES:
            try:
                loaded = strategy(grammar_s)
            except Exception:
                continue
            else:
                break
        else:
            raise AssertionError(f'could not parse {grammar}')

        grammar_name = f'{loaded["scopeName"]}.json'
        downloaded_grammars.add(grammar_name)
        grammar_filename = os.path.join(_GRAMMAR_DIR, grammar_name)
        with open(grammar_filename, 'w', encoding='UTF-8') as f:
            json_dump(loaded, f)
            f.write('\n')
    return downloaded_grammars


def _download(*, only: list[str] | None) -> int:
    assert os.path.exists(_GRAMMAR_DIR)
    assert os.path.exists(_LICENSE_DIR)

    licenses: set[str] = set()
    grammars: set[str] = set()

    futures = {}
    with concurrent.futures.ThreadPoolExecutor() as executor:
        for repo in REPOS:
            if only is not None and repo.name not in only:
                continue
            futures[executor.submit(_download_repo, repo)] = repo

        for future in concurrent.futures.as_completed(futures):
            repo = futures[future]
            print(f'{repo.name}...')
            downloaded_grammars = future.result()
            licenses.add(repo.license_filename)
            grammars.update(downloaded_grammars)

    # similar to what vs code does, derive javascript from typescript
    if only is None or 'microsoft/TypeScript-TmLanguage' in only:
        grammar_filename = os.path.join(_GRAMMAR_DIR, 'source.tsx.json')
        with open(grammar_filename, encoding='utf-8') as f:
            tsx = json.load(f)

        for scope in ('.js', '.js.jsx'):
            grammar_name = f'source{scope}.json'
            grammars.add(grammar_name)
            grammar_filename = os.path.join(_GRAMMAR_DIR, grammar_name)
            with open(grammar_filename, 'w', encoding='utf-8') as f:
                json_dump(_ts_to_js(scope, tsx), f)
                f.write('\n')

    if only is None:
        for root_scope in _EMPTY_GRAMMAR_ROOT_SCOPES:
            grammar_name = f'{root_scope}.json'
            with open(os.path.join(_GRAMMAR_DIR, grammar_name), 'w') as f:
                json_dump({'scopeName': root_scope, 'patterns': []}, f)
                f.write('\n')
            grammars.add(grammar_name)

    if only is None:
        existing_licenses = set(os.listdir(_LICENSE_DIR))
        for victim in existing_licenses - licenses:
            os.remove(os.path.join(_LICENSE_DIR, victim))
        existing_grammars = set(os.listdir(_GRAMMAR_DIR))
        for victim in existing_grammars - grammars:
            os.remove(os.path.join(_GRAMMAR_DIR, victim))
    else:
        licenses = set(os.listdir(_LICENSE_DIR))
        grammars = set(os.listdir(_GRAMMAR_DIR))

    cfg = configparser.ConfigParser()
    cfg.read('setup.cfg')

    license_files = sorted(os.path.join(_LICENSE_DIR, f) for f in licenses)
    cfg['metadata']['license_files'] = '\n' + '\n'.join(license_files)
    grammar_files = sorted(os.path.join(_GRAMMAR_DIR, f) for f in grammars)
    cfg['options.data_files'][_GRAMMAR_DIR] = '\n' + '\n'.join(grammar_files)

    sio = io.StringIO()
    cfg.write(sio)
    new_contents = sio.getvalue().strip() + '\n'
    new_contents = new_contents.replace('\t', '    ')
    new_contents = new_contents.replace(' \n', '\n')

    with open('setup.cfg', 'w', encoding='utf-8') as f:
        f.write(new_contents)

    return 0


def _update(*, only: list[str] | None) -> int:
    new = []
    for repo in REPOS:
        if only is not None and repo.name not in only:
            new.append(repo)
            continue

        print(f'{repo.name} ... ', end='', flush=True)

        with tempfile.TemporaryDirectory() as tmpdir:
            git = ('git', '-C', tmpdir)

            url = f'https://github.com/{repo.name}'
            clone_cmd = (*git, 'clone', '--no-checkout', '-q', url, '.')
            subprocess.check_call(clone_cmd)

            branches_cmd = (*git, 'branch', '-r', '--contains', repo.version)
            branches_s = subprocess.check_output(branches_cmd).decode()
            branches = [branch.strip() for branch in branches_s.splitlines()]

            if not branches:
                raise SystemExit(f'orphaned commit {repo.name}')
            elif branches[0].startswith('origin/HEAD -> '):
                _, _, branch = branches[0].rpartition(' ')
            else:
                branch = branches[0]

            version_cmd = (
                *git, 'log', '-1', '--format=%h', branch, '--', *repo.grammars,
            )
            version = subprocess.check_output(version_cmd).decode().strip()

            ancestor_cmd = (
                *git, 'merge-base', '--is-ancestor', version, repo.version,
            )
            if (
                    repo.version == 'HEAD' or
                    version != repo.version and subprocess.call(ancestor_cmd)
            ):
                print(f'{repo.version} => {version}')
                new.append(repo._replace(version=version))
            else:
                print('up to date!')
                new.append(repo)

    new.sort(key=lambda repo: repo.name)

    if new != list(REPOS):
        with open(__file__, encoding='utf-8') as f:
            contents = f.read()

        before, begin, rest = contents.partition('# BEGIN\n')
        _, end, rest = rest.partition('# END\n')

        new_contents = (
            'REPOS = (\n' +
            ''.join(f'{textwrap.indent(repr(r), " " * 4)},\n' for r in new) +
            ')\n'
        )
        new_contents = ''.join(
            line.replace('\n', '  # noqa: E501\n') if len(line) > 80 else line
            for line in new_contents.splitlines(True)
        )

        print('updating source!')
        with open(__file__, 'w', encoding='utf-8') as f:
            for part in (before, begin, new_contents, end, rest):
                f.write(part)

    return 0


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=('download', 'update'))
    parser.add_argument('--only', action='append')
    args = parser.parse_args()

    if args.command == 'download':
        return _download(only=args.only)
    elif args.command == 'update':
        return _update(only=args.only)
    else:
        raise NotImplementedError(args.command)


if __name__ == '__main__':
    raise SystemExit(main())
