#!/usr/bin/env python3
import argparse
import configparser
import io
import json
import os.path
import plistlib
import re
import subprocess
import tempfile
import textwrap
import urllib.parse
import urllib.request
from concurrent.futures import ThreadPoolExecutor
from concurrent.futures import as_completed
from pathlib import Path
from sys import stderr
from typing import Any
from typing import Callable
from typing import Dict
from typing import NamedTuple
from typing import Optional
from typing import Sequence
from typing import Set
from typing import Tuple

import cson  # pip install cson

HEADER_RE = re.compile('^#+ ', re.MULTILINE)
TRAILING_WS_RE = re.compile(r'\s+$', re.MULTILINE)

_STRATEGIES = (json.loads, cson.loads, plistlib.loads)
_GRAMMAR_DIR = Path('share/babi/grammar_v1')
_LICENSE_DIR = Path('licenses')


class Repo(NamedTuple):
    name: str
    version: str
    license_path: str
    grammars: Tuple[str, ...]
    todo: Optional[str] = None

    @property
    def license_filename(self) -> str:
        return f'LICENSE_{self.name.replace("/", "_")}'

    def url(self, path: str) -> str:
        path = urllib.parse.quote(path)
        return f'https://raw.github.com/{self.name}/{self.version}/{path}'

    def __repr__(self) -> str:
        grammars = tuple(sorted(self.grammars))
        max_width = 80 - len('        grammars=') - len(',')
        if len(repr(self.grammars)) > max_width:
            grammars_repr = (
                '(\n' +
                ''.join(f'        {g!r},\n' for g in grammars) +
                '    )'
            )
        else:
            grammars_repr = repr(grammars)

        if self.todo:
            todo_repr = f'    todo={self.todo!r},\n'
        else:
            todo_repr = ''

        return (
            f'{type(self).__name__}(\n'
            f'    name={self.name!r},\n'
            f'    version={self.version!r},\n'
            f'    license_path={self.license_path!r},\n'
            f'    grammars={grammars_repr},\n'
            f'{todo_repr}'
            f')'
        )


# BEGIN
REPOS = (
    Repo(
        name='MagicStack/MagicPython',
        version='b4b2e6e',
        license_path='LICENSE',
        grammars=(
            'grammars/MagicPython.tmLanguage',
            'grammars/MagicRegExp.tmLanguage',
        ),
    ),
    Repo(
        name='PowerShell/EditorSyntax',
        version='4a0a0766',
        license_path='LICENSE',
        grammars=('PowerShellSyntax.tmLanguage',),
    ),
    Repo(
        name='asottile/atom-language-rust',
        version='e113ca67',
        license_path='LICENSE.md',
        grammars=('grammars/rust.cson',),
        todo='https://github.com/zargony/atom-language-rust/pull/149',
    ),
    Repo(
        name='asottile/language-xml',
        version='2d76bc1f',
        license_path='LICENSE.md',
        grammars=('grammars/xml.cson', 'grammars/xsl.cson'),
        todo='https://github.com/atom/language-xml/pull/99',
    ),
    Repo(
        name='asottile/vscode-nim',
        version='c9051a8',
        license_path='LICENSE',
        grammars=('syntaxes/nim.json', 'syntaxes/nimble.json'),
        todo='https://github.com/pragmagic/vscode-nim/pull/155',
    ),
    Repo(
        name='asottile/vscode-terraform',
        version='ed3e9bd',
        license_path='LICENSE',
        grammars=('syntaxes/terraform.tmGrammar.json',),
        todo='https://github.com/hashicorp/vscode-terraform/pull/459',
    ),
    Repo(
        name='asottile/yaml.tmbundle',
        version='b81b4184',
        license_path='README.mdown#License',
        grammars=('Syntaxes/YAML.tmLanguage',),
        todo='https://github.com/textmate/yaml.tmbundle/pull/35',
    ),
    Repo(
        name='atom/language-css',
        version='28f15d9',
        license_path='LICENSE.md',
        grammars=('grammars/css.cson',),
    ),
    Repo(
        name='atom/language-sass',
        version='f52ab12',
        license_path='LICENSE.md',
        grammars=(
            'grammars/sass.cson',
            'grammars/sassdoc.cson',
            'grammars/scss.cson',
        ),
    ),
    Repo(
        name='atom/language-shellscript',
        version='7008ea92',
        license_path='LICENSE.md',
        grammars=(
            'grammars/shell-session.cson',
            'grammars/shell-unix-bash.cson',
        ),
    ),
    Repo(
        name='fadeevab/make.tmbundle',
        version='e36e02b',
        license_path='LICENSE.md',
        grammars=('Syntaxes/Makefile.plist',),
    ),
    Repo(
        name='jeff-hykin/better-go-syntax',
        version='302b427',
        license_path='LICENSE',
        grammars=('source/generated.tmLanguage.json',),
    ),
    Repo(
        name='jeff-hykin/cpp-textmate-grammar',
        version='16c5ba3',
        license_path='LICENSE',
        grammars=(
            'syntaxes/c.tmLanguage.json',
            'syntaxes/cpp.embedded.macro.tmLanguage.json',
            'syntaxes/cpp.tmLanguage.json',
            'syntaxes/objc.tmLanguage.json',
            'syntaxes/objcpp.tmLanguage.json',
        ),
    ),
    Repo(
        name='lingua-pupuli/puppet-editor-syntax',
        version='57695b7',
        license_path='LICENSE',
        grammars=('syntaxes/puppet.tmLanguage',),
    ),
    Repo(
        name='microsoft/TypeScript-TmLanguage',
        version='fa4e0d3',
        license_path='LICENSE.txt',
        grammars=('TypeScript.tmLanguage', 'TypeScriptReact.tmLanguage'),
    ),
    Repo(
        name='microsoft/vscode-JSON.tmLanguage',
        version='d113e909',
        license_path='LICENSE',
        grammars=('JSON.tmLanguage',),
    ),
    Repo(
        name='microsoft/vscode-markdown-tm-grammar',
        version='4be9cb3',
        license_path='LICENSE.txt',
        grammars=('syntaxes/markdown.tmLanguage',),
    ),
    Repo(
        name='microsoft/vscode-mssql',
        version='750d30d',
        license_path='LICENSE.txt',
        grammars=('syntaxes/SQL.plist',),
    ),
    Repo(
        name='moby/moby',
        version='c7ad2b866',
        license_path='LICENSE',
        grammars=(
            'contrib/syntax/textmate/Docker.tmbundle/Syntaxes/Dockerfile.tmLanguage',  # noqa: E501
        ),
    ),
    Repo(
        name='textmate/diff.tmbundle',
        version='0593bb77',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Diff.plist',),
    ),
    Repo(
        name='textmate/git.tmbundle',
        version='5870cf3',
        license_path='MIT-LICENSE',
        grammars=(
            'Syntaxes/Git Commit Message.tmLanguage',
            'Syntaxes/Git Rebase Message.tmLanguage',
        ),
    ),
    Repo(
        name='textmate/html.tmbundle',
        version='0c3d5ee5',
        license_path='README.mdown#License',
        grammars=(
            'Syntaxes/HTML (Derivative).tmLanguage',
            'Syntaxes/HTML.plist',
        ),
    ),
    Repo(
        name='textmate/ini.tmbundle',
        version='7d8c7b55',
        license_path='README.mdown#License',
        grammars=('Syntaxes/Ini.plist',),
    ),
    Repo(
        name='textmate/ruby.tmbundle',
        version='8d525dd',
        license_path='README.mdown#License',
        grammars=(
            'Syntaxes/Gemfile.tmLanguage',
            'Syntaxes/HTML (Ruby - ERB).tmLanguage',
            'Syntaxes/Ruby.plist',
        ),
    ),
    Repo(
        name='textmate/toml.tmbundle',
        version='e82b64c',
        license_path='README.mdown#License',
        grammars=('Syntaxes/TOML.tmLanguage',),
    ),
    Repo(
        name='vscode-restructuredtext/vscode-restructuredtext',
        version='2cf5174',
        license_path='LICENSE.txt',
        grammars=('syntaxes/restructuredtext.tmLanguage',),
    ),
)
# END


def _ts_to_js(scope: str, dct: Dict[str, Any]) -> Dict[str, Any]:
    ret = {}

    for k, v in dct.items():
        if k == 'name' and v == 'TypeScriptReact':
            v = 'JavaScriptReact'
        elif k == 'fileTypes':
            v = ['js', 'jsx', 'es6', 'mjs', 'cjs']
        elif k == 'scopeName':
            v = f'scope{scope}'
        elif isinstance(v, list):
            v = [_ts_to_js(scope, d) for d in v if isinstance(d, dict)]
        elif isinstance(v, dict):
            v = _ts_to_js(scope, v)
        elif k in {'name', 'contentName'} and isinstance(v, str):
            v = v.replace('.tsx', scope)

        ret[k] = v

    return ret


def _load_grammar_string(grammar_string: str, strategies: Sequence[Callable]):
    for strategy in strategies:
        try:
            loaded_grammar = strategy(grammar_string)
        except Exception:
            continue
        else:
            return loaded_grammar
    raise AssertionError(f'could not parse "{grammar_string}"')


def _download_grammar(repo: Repo, grammar: str) -> Path:
    grammar_string = urllib.request.urlopen(repo.url(grammar)).read()
    loaded_grammar = _load_grammar_string(grammar_string, _STRATEGIES)
    grammar_filepath = _GRAMMAR_DIR / f'{loaded_grammar["scopeName"]}.json'
    with grammar_filepath.open('w', encoding='utf-8') as f:
        json.dump(loaded_grammar, f)
        f.write('\n')
    return grammar_filepath


def _parse_license_with_header(license_string: str, header: str) -> Optional[str]:
    sections = HEADER_RE.split(license_string)
    for section in sections:
        if not section.startswith(header):
            continue
        _, _, section_body = section.partition('\n')
        return section_body


def _download_repo_license(repo: Repo):
    license_path, _, header = repo.license_path.partition('#')
    license_url = repo.url(license_path)
    license_string = urllib.request.urlopen(license_url).read().decode()

    if header:
        license_string = _parse_license_with_header(license_string, header)
        if license_string is None:
            raise AssertionError(f'license not found "{repo.license_path}" for "{repo.name}"')

    # some licenses have trailing whitespace, ugh
    license_string = TRAILING_WS_RE.sub('', license_string)

    with open(os.path.join(_LICENSE_DIR, repo.license_filename), 'w', encoding='utf-8') as f:
        f.write(f'LICENSE retrieved from {license_url}\n\n')
        f.write(f'{"-" * 79}\n\n')
        f.write(f'{license_string.rstrip()}\n')


def _download_repo(repo: Repo) -> Tuple[Path, Set[Path]]:
    print(f'{repo.name}...')
    _download_repo_license(repo)
    license_filepath = _LICENSE_DIR / repo.license_filename

    grammars_filepaths = set()
    with ThreadPoolExecutor() as executor:
        futures = {executor.submit(_download_grammar, repo, grammar): grammar for grammar in repo.grammars}
        for future in as_completed(futures):
            try:
                downloaded_grammar_filepath = future.result()
            except Exception as e:
                print(f'error while downloading grammar "{futures[future]}": {e}', file=stderr)
                continue
            else:
                grammars_filepaths.add(downloaded_grammar_filepath)
    return license_filepath, grammars_filepaths


def _download(*, only: Set[str]) -> int:
    assert _GRAMMAR_DIR.exists()
    assert _LICENSE_DIR.exists()

    licenses: Set[Path] = set()
    grammars: Set[Path] = set()

    repos = REPOS
    if only:
        repos = [repo for repo in repos if repo.name in only]

    with ThreadPoolExecutor() as executor:
        futures = {executor.submit(_download_repo, repo): repo for repo in repos}

        if not futures and only:
            print(
                'Nothing to do. Make sure you provided correct repo names to the "only" parameter',
                file=stderr
            )
            return 1

        for future in as_completed(futures):
            try:
                license_filepath, grammars_filepaths = future.result()
            except Exception as e:
                print(f'error downloading repo {futures[future]}: {e}', file=stderr)
                continue
            else:
                licenses.add(license_filepath)
                grammars.update(grammars_filepaths)

    # similar to what vs code does, derive javascript from typescript
    if 'microsoft/TypeScript-TmLanguage' in repos:
        with _GRAMMAR_DIR.joinpath('source.tsx.json').open(encoding='utf-8') as f:
            tsx = json.load(f)

        for scope in ('.js', '.js.jsx'):
            grammar_filepath = _GRAMMAR_DIR / f'source{scope}.json'
            grammars.add(grammar_filepath)
            with grammar_filepath.open('w', encoding='utf-8') as f:
                json.dump(_ts_to_js(scope, tsx), f)
                f.write('\n')

    if not only:
        existing_licenses = set(_LICENSE_DIR.iterdir())
        for victim in existing_licenses - licenses:
            victim.unlink()
        existing_grammars = set(_GRAMMAR_DIR.iterdir())
        for victim in existing_grammars - grammars:
            victim.unlink()
    else:
        licenses = set(_LICENSE_DIR.iterdir())
        grammars = set(_GRAMMAR_DIR.iterdir())

    cfg = configparser.ConfigParser()
    setup_cfg_filepath = Path('setup.cfg')
    cfg.read(setup_cfg_filepath)

    # we use Path.as_posix() everywhere to make sure that paths (slashes vs backslashes)
    # are reproducible on each supported platform (hi Windows)
    license_files = sorted(license.as_posix() for license in licenses)
    cfg['metadata']['license_files'] = '\n' + '\n'.join(license_files)
    grammar_files = sorted(grammar.as_posix() for grammar in grammars)
    cfg['options.data_files'][_GRAMMAR_DIR.as_posix()] = '\n' + '\n'.join(grammar_files)

    sio = io.StringIO()
    cfg.write(sio)
    new_contents = sio.getvalue().strip() + '\n'
    new_contents = new_contents.replace('\t', '    ')
    new_contents = new_contents.replace(' \n', '\n')

    with setup_cfg_filepath.open('w', encoding='utf-8') as f:
        f.write(new_contents)

    return 0


def _update_repo(repo: Repo) -> Repo:
    print(f'Updating {repo.name}... ')

    with tempfile.TemporaryDirectory() as tmpdir:
        git = ('git', '-C', tmpdir)

        url = f'https://github.com/{repo.name}'
        clone_cmd = (*git, 'clone', '--no-checkout', '-q', url, '.')
        subprocess.check_call(clone_cmd)

        branches_cmd = (*git, 'branch', '-r', '--contains', repo.version)
        branches_s = subprocess.check_output(branches_cmd).decode()
        branches = [branch.strip() for branch in branches_s.splitlines()]

        if not branches:
            raise SystemExit(f'orphaned commit {repo.name}')
        elif branches[0].startswith('origin/HEAD -> '):
            _, _, branch = branches[0].rpartition(' ')
        else:
            branch = branches[0]

        version_cmd = (
            *git, 'log', '-1', '--format=%h', branch, '--', *repo.grammars,
        )
        version = subprocess.check_output(version_cmd).decode().strip()

        ancestor_cmd = (
            *git, 'merge-base', '--is-ancestor', version, repo.version,
        )

        if (
                repo.version == 'HEAD' or
                version != repo.version and subprocess.call(ancestor_cmd)
        ):
            print(f'Updated {repo.name} {repo.version} => {version}')
            return repo._replace(version=version)

        print(f'{repo.name} is up to date!')
        return repo


def _update(*, only: Set[str]) -> int:
    up_to_date_repos = []
    with ThreadPoolExecutor() as executor:
        futures = {}

        for repo in REPOS:
            if only and repo.name not in only:
                up_to_date_repos.append(repo)
                continue
            futures[executor.submit(_update_repo, repo)] = repo

        if not futures and only:
            print(
                'Nothing to do. Make sure you provided correct repo names to the "only" parameter',
                file=stderr
            )
            return 1

        for future in as_completed(futures):
            try:
                updated_repo = future.result()
            except Exception as e:
                print(f'error updating repo {futures[future]}', file=stderr)
                continue
            else:
                up_to_date_repos.append(updated_repo)

    up_to_date_repos.sort(key=lambda repo: repo.name)

    if up_to_date_repos != list(REPOS):
        print('Repositories have changed after the update, preparing to write changes...')
        with open(__file__, encoding='utf-8') as f:
            contents = f.read()

        before, begin, rest = contents.partition('# BEGIN\n')
        _, end, rest = rest.partition('# END\n')

        new_contents = (
                'REPOS = (\n' +
                ''.join(f'{textwrap.indent(repr(r), " " * 4)},\n' for r in up_to_date_repos) +
                ')\n'
        )
        new_contents = ''.join(
            line.replace('\n', '  # noqa: E501\n') if len(line) > 80 else line
            for line in new_contents.splitlines(True)
        )

        print('Writing changes to the disk...')
        with open(__file__, 'w', encoding='utf-8') as f:
            for part in (before, begin, new_contents, end, rest):
                f.write(part)

    return 0


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('command', choices=('download', 'update'))
    # "extend" is a 3.8+ action, which allows passing multiple arguments
    # to the same command, e.g. ./app --foo 1 2 3 -> {'foo': ['1', '2', '3']}
    parser.add_argument('--only', action='extend', nargs='+', type=str, default=[])
    args = parser.parse_args()

    only = set(args.only)  # we only care about unique repo names

    if args.command == 'download':
        return _download(only=only)
    elif args.command == 'update':
        return _update(only=only)
    else:
        raise NotImplementedError(args.command)


if __name__ == '__main__':
    exit(main())
